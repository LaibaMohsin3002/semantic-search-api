# -*- coding: utf-8 -*-
"""search_api.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1tIPjdoxPgF7snmrrslY3dLEKRGbD9GHR
"""

# !pip install flask pyngrok sentence-transformers firebase-admin

from flask import Flask, request, jsonify
from sentence_transformers import SentenceTransformer, util
import torch, firebase_admin
from firebase_admin import credentials, firestore
from pyngrok import ngrok, conf

# ðŸ”‘ Paste your token below (replace the placeholder)
ngrok.set_auth_token("3472n6xHIE4HRD77MtrBQsSrlvt_3nL5W3UitPxmUkLXsu2E6")

# ----------------------------
# Firebase + Model setup
# ----------------------------
if not firebase_admin._apps:
    cred = credentials.Certificate("firebase-key.json")
    firebase_admin.initialize_app(cred)

db = firestore.client()
model = SentenceTransformer("paraphrase-MiniLM-L6-v2")

app = Flask(__name__)

# ----------------------------
# Fetch buyer location
# ----------------------------
def get_user_location(uid):
    user_ref = db.collection("users").where("uid", "==", uid).limit(1).stream()
    for doc in user_ref:
        data = doc.to_dict()
        return data.get("location", "")
    raise ValueError(f"No user found with uid: {uid}")

# ----------------------------
# Hybrid search
# ----------------------------
def hybrid_search(keyword, uid):
    user_location = get_user_location(uid)
    query_text = f"{keyword} {user_location}"
    query_emb = model.encode(query_text, convert_to_tensor=True)

    listings_ref = db.collection("embeddings").stream()
    results = []

    for doc in listings_ref:
        data = doc.to_dict()
        emb = torch.tensor(data["embedding"])
        similarity = util.cos_sim(query_emb, emb).item()

        crop_name = data.get("cropName", "")
        crop_match = 1.0 if keyword.lower() in crop_name.lower() else 0.0
        price = float(data.get("pricePerUnit", 1))
        price_score = 1 / (1 + (price / 100))

        total_score = (0.55 * similarity) + (0.25 * crop_match) + (0.20 * price_score)

        results.append({
            "listingId": data["listingId"],
            "cropName": crop_name,
            "price": price,
            "location": data.get("location"),
            "similarity": similarity,
            "total_score": total_score
        })

    ranked = sorted(results, key=lambda x: (-x["total_score"], x["price"]))
    return ranked[:10]

# ----------------------------
# API route
# ----------------------------
@app.route("/search", methods=["POST"])
def search():
    try:
        data = request.json
        keyword = data.get("keyword")
        uid = data.get("uid")
        if not keyword or not uid:
            return jsonify({"error": "Missing 'keyword' or 'uid'"}), 400

        results = hybrid_search(keyword, uid)
        return jsonify({"rankedListings": results})

    except Exception as e:
        return jsonify({"error": str(e)}), 500

# ----------------------------
# Run with ngrok tunnel
# ----------------------------
public_url = ngrok.connect(5000)
print("ðŸ”¥ API is live! Public URL:", public_url)
app.run(port=5000)